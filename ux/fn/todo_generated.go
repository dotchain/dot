// Copyright (C) 2019 rameshvk. All rights reserved.
// Use of this source code is governed by a MIT-style license
// that can be found in the LICENSE file.
//
//
// This code is generated by github.com/dotchain/dot/ux/fn/codegen.go

package fn

import (
	"github.com/dotchain/dot/ux/core"
	"github.com/dotchain/dot/ux/streams"
	"github.com/dotchain/dot/ux/todo"
)

type tvCtx struct {
	streams.Subs
	ElementCache
	todo struct {
		todo.TaskEditCache
	}
	memoizedParams struct {
		styles      core.Styles
		showDone    bool
		showNotDone bool
		tasks       *todo.TasksStream
		result1     core.Element
	}
}

func (c *tvCtx) areArgsSame(styles core.Styles, showDone bool, showNotDone bool, tasks *todo.TasksStream) bool {
	if styles != c.memoizedParams.styles {
		return false
	}
	if showDone != c.memoizedParams.showDone {
		return false
	}
	if showNotDone != c.memoizedParams.showNotDone {
		return false
	}
	if tasks != c.memoizedParams.tasks {
		return false
	}
	return true
}

func (c *tvCtx) refreshIfNeeded(styles core.Styles, showDone bool, showNotDone bool, tasks *todo.TasksStream) (result1 core.Element) {
	if !c.areArgsSame(styles, showDone, showNotDone, tasks) {
		return c.refresh(styles, showDone, showNotDone, tasks)
	}
	return c.memoizedParams.result1
}

func (c *tvCtx) refresh(styles core.Styles, showDone bool, showNotDone bool, tasks *todo.TasksStream) (result1 core.Element) {
	c.memoizedParams.styles, c.memoizedParams.showDone, c.memoizedParams.showNotDone, c.memoizedParams.tasks = styles, showDone, showNotDone, tasks
	c.Subs.Begin()
	defer c.Subs.End()
	c.ElementCache.Begin()
	defer c.ElementCache.End()
	c.todo.TaskEditCache.Begin()
	defer c.todo.TaskEditCache.End()
	c.memoizedParams.result1 = TasksView(c, styles, showDone, showNotDone, tasks)
	return c.memoizedParams.result1
}

// TasksViewCache is generated from TasksView.  Please see that for
// documentation
type TasksViewCache struct {
	old, current map[interface{}]*tvCtx
}

// Begin starts the round
func (c *TasksViewCache) Begin() {
	c.old, c.current = c.current, map[interface{}]*tvCtx{}
}

// End ends the round
func (c *TasksViewCache) End() {
	// TODO: deliver Close() handlers if they exist
	c.old = nil
}

// TasksView implements the cache create or fetch method
func (c *TasksViewCache) TasksView(key interface{}, styles core.Styles, showDone bool, showNotDone bool, tasks *todo.TasksStream) core.Element {
	cOld, ok := c.old[key]

	if ok {
		delete(c.old, key)
	} else {
		cOld = &tvCtx{}
	}
	c.current[key] = cOld
	return cOld.refreshIfNeeded(styles, showDone, showNotDone, tasks)
}
