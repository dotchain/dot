// Copyright (C) 2019 rameshvk. All rights reserved.
// Use of this source code is governed by a MIT-style license
// that can be found in the LICENSE file.
//
//
// This code is generated by github.com/dotchain/dot/ux/fn/cmd/gen.go

package fn

import (
	"github.com/dotchain/dot/ux/core"
	"github.com/dotchain/dot/ux/streams"
	"github.com/dotchain/dot/ux/todo"
)

// tasksViewCtx is the context struct needed for TasksView
type tasksViewCtx struct {
	streams.Subs

	ElementCache

	todo struct {
		todo.TaskEditCache
	}
}

func (ctx *tasksViewCtx) refresh(styles core.Styles, showDone bool, showNotDone bool, tasks *todo.TasksStream) core.Element {
	ctx.Subs.Begin()
	defer ctx.Subs.End()
	ctx.ElementCache.Begin()
	defer ctx.ElementCache.End()
	ctx.todo.TaskEditCache.Begin()
	defer ctx.todo.TaskEditCache.End()

	return TasksView(ctx, styles, showDone, showNotDone, tasks)

}

// TasksViewCache implements a cache of TasksView controls
type TasksViewCache struct {
	old, current map[interface{}]*tasksViewCtx
}

// Begin starts the round
func (c *TasksViewCache) Begin() {
	c.old, c.current = c.current, map[interface{}]*tasksViewCtx{}
}

// End ends the round
func (c *TasksViewCache) End() {
	// TODO: deliver Close() handlers if they exist
	c.old = nil
}

// TasksView implements the cache create or fetch method
func (c *TasksViewCache) TasksView(key interface{}, styles core.Styles, showDone bool, showNotDone bool, tasks *todo.TasksStream) core.Element {
	ctx, ok := c.old[key]

	if ok {
		delete(c.old, key)
	} else {
		ctx = &tasksViewCtx{}
	}
	c.current[key] = ctx
	return ctx.refresh(styles, showDone, showNotDone, tasks)
}
