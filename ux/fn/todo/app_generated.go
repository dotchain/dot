// Copyright (C) 2019 rameshvk. All rights reserved.
// Use of this source code is governed by a MIT-style license
// that can be found in the LICENSE file.
//
//
// This code is generated by github.com/dotchain/dot/ux/fn/codegen.go

package todo

import (
	"github.com/dotchain/dot/ux/core"
	"github.com/dotchain/dot/ux/fn"
	"github.com/dotchain/dot/ux/streams"
)

type appCtx struct {
	streams.Cache
	TasksViewCache
	fn struct {
		fn.CheckboxCache
		fn.ElementCache
	}

	memoInitialized bool
	memoizedParams  struct {
		styles  core.Styles
		tasks   *TasksStream
		result1 core.Element
	}
}

func (c *appCtx) areArgsSame(styles core.Styles, tasks *TasksStream) bool {
	if styles != c.memoizedParams.styles {
		return false
	}
	return tasks == c.memoizedParams.tasks
}

func (c *appCtx) refreshIfNeeded(styles core.Styles, tasks *TasksStream) (result1 core.Element) {
	if !c.memoInitialized || !c.areArgsSame(styles, tasks) {
		return c.refresh(styles, tasks)
	}
	return c.memoizedParams.result1
}

func (c *appCtx) refresh(styles core.Styles, tasks *TasksStream) (result1 core.Element) {
	c.memoInitialized = true
	c.memoizedParams.styles, c.memoizedParams.tasks = styles, tasks
	c.Cache.Begin()
	defer c.Cache.End()
	c.TasksViewCache.Begin()
	defer c.TasksViewCache.End()
	c.fn.CheckboxCache.Begin()
	defer c.fn.CheckboxCache.End()
	c.fn.ElementCache.Begin()
	defer c.fn.ElementCache.End()
	c.memoizedParams.result1 = App(c, styles, tasks)
	return c.memoizedParams.result1
}

// AppCache is generated from App.  Please see that for
// documentation
type AppCache struct {
	old, current map[interface{}]*appCtx
}

// Begin starts the round
func (c *AppCache) Begin() {
	c.old, c.current = c.current, map[interface{}]*appCtx{}
}

// End ends the round
func (c *AppCache) End() {
	// TODO: deliver Close() handlers if they exist
	c.old = nil
}

// App implements the cache create or fetch method
func (c *AppCache) App(key interface{}, styles core.Styles, tasks *TasksStream) core.Element {
	cOld, ok := c.old[key]

	if ok {
		delete(c.old, key)
	} else {
		cOld = &appCtx{}
	}
	c.current[key] = cOld
	return cOld.refreshIfNeeded(styles, tasks)
}
