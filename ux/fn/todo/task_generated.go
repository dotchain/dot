// Copyright (C) 2019 rameshvk. All rights reserved.
// Use of this source code is governed by a MIT-style license
// that can be found in the LICENSE file.
//
//
// This code is generated by github.com/dotchain/dot/ux/fn/codegen.go

package todo

import (
	"github.com/dotchain/dot/ux/core"
	"github.com/dotchain/dot/ux/fn"
	"github.com/dotchain/dot/ux/streams"
)

type taskEditCtx struct {
	streams.Subs
	fn struct {
		fn.CheckboxCache
		fn.ElementCache
		fn.TextEditCache
	}

	memoInitialized bool
	memoizedParams  struct {
		styles  core.Styles
		task    *TaskStream
		result1 core.Element
	}
}

func (c *taskEditCtx) areArgsSame(styles core.Styles, task *TaskStream) bool {
	if styles != c.memoizedParams.styles {
		return false
	}
	if task != c.memoizedParams.task {
		return false
	}
	return true
}

func (c *taskEditCtx) refreshIfNeeded(styles core.Styles, task *TaskStream) (result1 core.Element) {
	if !c.memoInitialized || !c.areArgsSame(styles, task) {
		return c.refresh(styles, task)
	}
	return c.memoizedParams.result1
}

func (c *taskEditCtx) refresh(styles core.Styles, task *TaskStream) (result1 core.Element) {
	c.memoInitialized = true
	c.memoizedParams.styles, c.memoizedParams.task = styles, task
	c.Subs.Begin()
	defer c.Subs.End()
	c.fn.CheckboxCache.Begin()
	defer c.fn.CheckboxCache.End()
	c.fn.ElementCache.Begin()
	defer c.fn.ElementCache.End()
	c.fn.TextEditCache.Begin()
	defer c.fn.TextEditCache.End()
	c.memoizedParams.result1 = TaskEdit(c, styles, task)
	return c.memoizedParams.result1
}

// TaskEditCache is generated from TaskEdit.  Please see that for
// documentation
type TaskEditCache struct {
	old, current map[interface{}]*taskEditCtx
}

// Begin starts the round
func (c *TaskEditCache) Begin() {
	c.old, c.current = c.current, map[interface{}]*taskEditCtx{}
}

// End ends the round
func (c *TaskEditCache) End() {
	// TODO: deliver Close() handlers if they exist
	c.old = nil
}

// TaskEdit implements the cache create or fetch method
func (c *TaskEditCache) TaskEdit(key interface{}, styles core.Styles, task *TaskStream) core.Element {
	cOld, ok := c.old[key]

	if ok {
		delete(c.old, key)
	} else {
		cOld = &taskEditCtx{}
	}
	c.current[key] = cOld
	return cOld.refreshIfNeeded(styles, task)
}
