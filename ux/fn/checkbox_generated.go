// Copyright (C) 2019 rameshvk. All rights reserved.
// Use of this source code is governed by a MIT-style license
// that can be found in the LICENSE file.
//
//
// This code is generated by github.com/dotchain/dot/ux/fn/codegen.go

package fn

import (
	"github.com/dotchain/dot/ux/core"
	"github.com/dotchain/dot/ux/streams"
)

type checkboxCtx struct {
	ElementCache
	memoInitialized bool
	memoizedParams  struct {
		styles  core.Styles
		checked *streams.BoolStream
		result1 core.Element
	}
}

func (c *checkboxCtx) areArgsSame(styles core.Styles, checked *streams.BoolStream) bool {
	if styles != c.memoizedParams.styles {
		return false
	}
	if checked != c.memoizedParams.checked {
		return false
	}
	return true
}

func (c *checkboxCtx) refreshIfNeeded(styles core.Styles, checked *streams.BoolStream) (result1 core.Element) {
	if !c.memoInitialized || !c.areArgsSame(styles, checked) {
		return c.refresh(styles, checked)
	}
	return c.memoizedParams.result1
}

func (c *checkboxCtx) refresh(styles core.Styles, checked *streams.BoolStream) (result1 core.Element) {
	c.memoInitialized = true
	c.memoizedParams.styles, c.memoizedParams.checked = styles, checked
	c.ElementCache.Begin()
	defer c.ElementCache.End()
	c.memoizedParams.result1 = Checkbox(c, styles, checked)
	return c.memoizedParams.result1
}

// CheckboxCache is generated from Checkbox.  Please see that for
// documentation
type CheckboxCache struct {
	old, current map[interface{}]*checkboxCtx
}

// Begin starts the round
func (c *CheckboxCache) Begin() {
	c.old, c.current = c.current, map[interface{}]*checkboxCtx{}
}

// End ends the round
func (c *CheckboxCache) End() {
	// TODO: deliver Close() handlers if they exist
	c.old = nil
}

// Checkbox implements the cache create or fetch method
func (c *CheckboxCache) Checkbox(key interface{}, styles core.Styles, checked *streams.BoolStream) core.Element {
	cOld, ok := c.old[key]

	if ok {
		delete(c.old, key)
	} else {
		cOld = &checkboxCtx{}
	}
	c.current[key] = cOld
	return cOld.refreshIfNeeded(styles, checked)
}
