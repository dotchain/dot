// This file is generated by:
//    github.com/dotchain/dot/ux/templates/cache.template
//
// Copyright (C) 2019 rameshvk. All rights reserved.
// Use of this source code is governed by a MIT-style license
// that can be found in the LICENSE file.

package todo

import "github.com/dotchain/dot/ux/core"

// TaskEditCache holds a cache of TaskEdit controls.
//
// Controls that have manage a bunch of TaskEdit controls
// should maintain a cache created like so:
//
//     cache := &TaskEditCache{}
//
// When updating, the cache can be used to reuse controls:
//
//     cache.Begin()
//     defer cache.End()
//
//     ... for each TaskEdit control needed do:
//     cache.Get(key, styles, task)
//
// This allows the cache to reuse the control if the key exists.
// Otherwise a new control is created via NewTaskEdit(styles, task)
//
// When a control is reused, it is also automatically updated.
type TaskEditCache struct {
	old, current map[interface{}]*TaskEdit
}

// Begin should be called before the start of a round
func (c *TaskEditCache) Begin() {
	c.old = c.current
	c.current = map[interface{}]*TaskEdit{}
}

// End should be called at the end of a round
func (c *TaskEditCache) End() {
	// if components had a Close() method all the old left-over items
	// can be cleaned up via that call
	c.old = nil
}

// Item fetches the item at the specific key
func (c *TaskEditCache) Item(key interface{}) *TaskEdit {
	return c.current[key]
}

// TaskEdit fetches a TaskEdit from the cache (updating it)
// or creates a new TaskEdit
func (c *TaskEditCache) TaskEdit(key interface{}, styles core.Styles, task Task) *TaskEdit {
	if item, ok := c.old[key]; !ok {
		c.current[key] = NewTaskEdit(styles, task)
	} else {
		delete(c.old, key)
		item.Update(styles, task)
		c.current[key] = item
	}

	return c.current[key]
}
