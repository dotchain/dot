// This file is generated by:
//    github.com/dotchain/dot/ux/templates/cache.template
//
// Copyright (C) 2019 rameshvk. All rights reserved.
// Use of this source code is governed by a MIT-style license
// that can be found in the LICENSE file.

package {{.Package}}

import "github.com/dotchain/dot/ux"

// {{.Base}}Cache holds a cache of {{.BaseType}} controls.
//
// Controls that have manage a bunch of {{.BaseType}} controls
// should maintain a cache created like so:
//
//     cache := &{{.Base}}Cache{}
//
// When updating, they should use the cache to reuse items:
//
//     cache.Reset()
//     defer cache.Cleanup()
//
//     ... for each {{.BaseType}} control needed do:
//     cache.Get(key, {{.Args}})
//
// This allows the cache to reuse the control if the key exists.
// Otherwise a new control is created via {{.Constructor}}({{.Args}})
//
// When a control is reused, it is also automatically updated.
type {{.Base}}Cache struct {
	old, current map[interface{}]*{{.BaseType}}
}

// Reset should be called before the start of a round
func (c *{{.Base}}Cache) Reset() {
	c.old = c.current
	c.current = map[interface{}]*{{.BaseType}}{}
}

// Cleanup should be called at the end of a round
func (c *{{.Base}}Cache) Cleanup() {
	// if TodoTask had a Close() method all the old left-over items
	// can be cleaned up via that call
	c.old = nil
}

// Get fetches a {{.BaseType}} from the cache (updating it)
// or creates a new {{.BaseType}}
//
// It returns the {{.BaseType}} but also whether the control existed.
// This can be used to conditionally setup listeners.
func (c *{{.Base}}Cache) Get(key interface{}, {{.ArgsDef}}) (*{{.BaseType}}, bool) {
	exists := false
	if item, ok := c.old[key]; !ok {
		c.current[key] = {{.Constructor}}({{.Args}})
	} else {
		delete(c.old, key)
		item.Update({{.Args}})
		c.current[key] = item
		exists = true
	}

	return c.current[key], exists
}
