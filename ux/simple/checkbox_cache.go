// This file is generated by:
//    github.com/dotchain/dot/ux/templates/cache.template
//
// Copyright (C) 2019 rameshvk. All rights reserved.
// Use of this source code is governed by a MIT-style license
// that can be found in the LICENSE file.

package simple

import "github.com/dotchain/dot/ux/core"

// CheckboxCache holds a cache of Checkbox controls.
//
// Controls that have manage a bunch of Checkbox controls
// should maintain a cache created like so:
//
//     cache := &CheckboxCache{}
//
// When updating, the cache can be used to reuse controls:
//
//     cache.Begin()
//     defer cache.End()
//
//     ... for each Checkbox control needed do:
//     cache.Get(key, styles, checked)
//
// This allows the cache to reuse the control if the key exists.
// Otherwise a new control is created via NewCheckbox(styles, checked)
//
// When a control is reused, it is also automatically updated.
type CheckboxCache struct {
	old, current map[interface{}]*Checkbox
}

// Begin should be called before the start of a round
func (c *CheckboxCache) Begin() {
	c.old = c.current
	c.current = map[interface{}]*Checkbox{}
}

// End should be called at the end of a round
func (c *CheckboxCache) End() {
	// if components had a Close() method all the old left-over items
	// can be cleaned up via that call
	c.old = nil
}

// TryGet fetches a Checkbox from the cache (updating it)
// or creates a new Checkbox
//
// It returns the Checkbox but also whether the control existed.
// This can be used to conditionally setup listeners.
func (c *CheckboxCache) TryGet(key interface{}, styles core.Styles, checked bool) (*Checkbox, bool) {
	exists := false
	if item, ok := c.old[key]; !ok {
		c.current[key] = NewCheckbox(styles, checked)
	} else {
		delete(c.old, key)
		item.Update(styles, checked)
		c.current[key] = item
		exists = true
	}

	return c.current[key], exists
}

// Item fetches the item at the specific key
func (c *CheckboxCache) Item(key interface{}) *Checkbox {
	return c.current[key]
}

// Get fetches a Checkbox from the cache (updating it)
// or creates a new Checkbox
//
// Use TryGet to also fetch whether the control from last round was reused
func (c *CheckboxCache) Get(key interface{}, styles core.Styles, checked bool) *Checkbox {
	v, _ := c.TryGet(key, styles, checked)
	return v
}
